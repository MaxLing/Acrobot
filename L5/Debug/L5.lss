
L5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  00000c68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9d  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e4  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084a  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  0000269c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000324  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b34  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_32>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a8 32       	cpi	r26, 0x28	; 40
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  cc:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <init_timer1>:
    return 0;
}

void init_timer1() 
{
	OCR1A= 1000; //set frequency to 16mhz/8/1000 = 2khz
  d4:	88 ee       	ldi	r24, 0xE8	; 232
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	clear(TCCR1B, CS12);
  e0:	e1 e8       	ldi	r30, 0x81	; 129
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	80 83       	st	Z, r24
	set(TCCR1B, CS11);
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
	clear(TCCR1B, CS10); 
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
	//prescaler of system clock is /8
	set(TCCR1B,WGM13);
  f6:	80 81       	ld	r24, Z
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
 102:	e0 e8       	ldi	r30, 0x80	; 128
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
	set(TCCR1A,WGM10);
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
	//timer mode is mode 15 UP to OCR1A, PWM mode
	set(TCCR1A,COM1C1);
 112:	80 81       	ld	r24, Z
 114:	88 60       	ori	r24, 0x08	; 8
 116:	80 83       	st	Z, r24
	clear(TCCR1A,COM1C0);
 118:	80 81       	ld	r24, Z
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	80 83       	st	Z, r24
	//clear at OCR1C, set at rollover
	set(DDRB, 7);
 11e:	27 9a       	sbi	0x04, 7	; 4
 120:	08 95       	ret

00000122 <init_timer3>:
	// enable B7 output
}

void init_timer3()
{
    OCR3A = 250; //set frequency to 62.5hz
 122:	8a ef       	ldi	r24, 0xFA	; 250
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 12a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

    set(TCCR3B,CS32);    
 12e:	e1 e9       	ldi	r30, 0x91	; 145
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 60       	ori	r24, 0x04	; 4
 136:	80 83       	st	Z, r24
    clear(TCCR3B,CS31);  
 138:	80 81       	ld	r24, Z
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	80 83       	st	Z, r24
    set(TCCR3B,CS30);    
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
	//prescaler of system clock is /1024
    clear(TCCR3B,WGM33);
 144:	80 81       	ld	r24, Z
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	80 83       	st	Z, r24
    set(TCCR3B,WGM32);
 14a:	80 81       	ld	r24, Z
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	80 83       	st	Z, r24
    clear(TCCR3A,WGM31);
 150:	e0 e9       	ldi	r30, 0x90	; 144
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
 15a:	80 81       	ld	r24, Z
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	80 83       	st	Z, r24
	//timer mode is mode4 UP to OCR3A
      
	set(TIMSK3, OCIE3A);
 160:	e1 e7       	ldi	r30, 0x71	; 113
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 83       	st	Z, r24
	 // enable timer3 match OCR3A interrupt
	sei();     
 16a:	78 94       	sei
 16c:	08 95       	ret

0000016e <init_imu>:
	
}

void init_imu()
{
     m_imu_init(1, 1); // +/-2g  +/-250deg/s 
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 07 03 	call	0x60e	; 0x60e <m_imu_init>
 176:	08 95       	ret

00000178 <get_acc>:
}
     

float get_acc() // offset
{
 178:	cf 92       	push	r12
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
	//static float z_accel_filter = 0;

	//x_accel_filter = x_accel_filter * (filter) + x_accel * (1 - filter); 
	//z_accel_filter = z_accel_filter * (filter) + z_accel * (1 - filter); // low pass filter
	//accel_filter = atan2(z_accel_filter,x_accel_filter);
	accel_filter = accel_filter *filter + x_accel * (1-filter);
 180:	23 e3       	ldi	r18, 0x33	; 51
 182:	33 e3       	ldi	r19, 0x33	; 51
 184:	43 e7       	ldi	r20, 0x73	; 115
 186:	5f e3       	ldi	r21, 0x3F	; 63
 188:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <accel_filter.1823>
 18c:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <accel_filter.1823+0x1>
 190:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <accel_filter.1823+0x2>
 194:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <accel_filter.1823+0x3>
 198:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 19c:	6b 01       	movw	r12, r22
 19e:	7c 01       	movw	r14, r24
     

float get_acc() // offset
{
	static float accel_filter = 0;
	float x_accel =  -(float) data[0]*2/32768;
 1a0:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <data>
 1a4:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <data+0x1>
 1a8:	07 2e       	mov	r0, r23
 1aa:	00 0c       	add	r0, r0
 1ac:	88 0b       	sbc	r24, r24
 1ae:	99 0b       	sbc	r25, r25
 1b0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__floatsisf>
 1b4:	90 58       	subi	r25, 0x80	; 128
 1b6:	9b 01       	movw	r18, r22
 1b8:	ac 01       	movw	r20, r24
 1ba:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	58 e3       	ldi	r21, 0x38	; 56
 1c6:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
	//static float z_accel_filter = 0;

	//x_accel_filter = x_accel_filter * (filter) + x_accel * (1 - filter); 
	//z_accel_filter = z_accel_filter * (filter) + z_accel * (1 - filter); // low pass filter
	//accel_filter = atan2(z_accel_filter,x_accel_filter);
	accel_filter = accel_filter *filter + x_accel * (1-filter);
 1ca:	20 ed       	ldi	r18, 0xD0	; 208
 1cc:	3c ec       	ldi	r19, 0xCC	; 204
 1ce:	4c e4       	ldi	r20, 0x4C	; 76
 1d0:	5d e3       	ldi	r21, 0x3D	; 61
 1d2:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 1d6:	9b 01       	movw	r18, r22
 1d8:	ac 01       	movw	r20, r24
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 1e2:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <accel_filter.1823>
 1e6:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <accel_filter.1823+0x1>
 1ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <accel_filter.1823+0x2>
 1ee:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <accel_filter.1823+0x3>
	return accel_filter;
}
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	08 95       	ret

000001fc <get_gyro>:

float get_gyro() // offset
{
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
	static float gyro_angle_filter = 0;
	float TIME = 0.016;//Time depends on timer3
	static float prev_y_gyro_angle = 0;
	static float y_gyro_angle = 0;

	y_gyro = (-(float) data[4])*250*pi/(180*32768);
 204:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <data+0x8>
 208:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <data+0x9>
 20c:	07 2e       	mov	r0, r23
 20e:	00 0c       	add	r0, r0
 210:	88 0b       	sbc	r24, r24
 212:	99 0b       	sbc	r25, r25
 214:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__floatsisf>
 218:	90 58       	subi	r25, 0x80	; 128
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	4a e7       	ldi	r20, 0x7A	; 122
 220:	53 e4       	ldi	r21, 0x43	; 67
 222:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 226:	2a ed       	ldi	r18, 0xDA	; 218
 228:	3f e0       	ldi	r19, 0x0F	; 15
 22a:	49 e4       	ldi	r20, 0x49	; 73
 22c:	50 e4       	ldi	r21, 0x40	; 64
 22e:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	44 eb       	ldi	r20, 0xB4	; 180
 238:	5a e4       	ldi	r21, 0x4A	; 74
 23a:	0e 94 33 04 	call	0x866	; 0x866 <__divsf3>
	prev_y_gyro_angle = y_gyro_angle;
 23e:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <y_gyro_angle.1831>
 242:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <y_gyro_angle.1831+0x1>
 246:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <y_gyro_angle.1831+0x2>
 24a:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <y_gyro_angle.1831+0x3>
 24e:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <prev_y_gyro_angle.1830>
 252:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <prev_y_gyro_angle.1830+0x1>
 256:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <prev_y_gyro_angle.1830+0x2>
 25a:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <prev_y_gyro_angle.1830+0x3>
	y_gyro_angle = y_gyro_angle + y_gyro * TIME; 
 25e:	2f e6       	ldi	r18, 0x6F	; 111
 260:	32 e1       	ldi	r19, 0x12	; 18
 262:	43 e8       	ldi	r20, 0x83	; 131
 264:	5c e3       	ldi	r21, 0x3C	; 60
 266:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 26a:	9b 01       	movw	r18, r22
 26c:	ac 01       	movw	r20, r24
 26e:	c7 01       	movw	r24, r14
 270:	b6 01       	movw	r22, r12
 272:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 276:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <y_gyro_angle.1831>
 27a:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <y_gyro_angle.1831+0x1>
 27e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <y_gyro_angle.1831+0x2>
 282:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <y_gyro_angle.1831+0x3>
	gyro_angle_filter = (filter) * (gyro_angle_filter + y_gyro_angle - prev_y_gyro_angle); // high pass filter
 286:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 28a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 28e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
 292:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
 296:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 29a:	a7 01       	movw	r20, r14
 29c:	96 01       	movw	r18, r12
 29e:	0e 94 c6 03 	call	0x78c	; 0x78c <__subsf3>
 2a2:	23 e3       	ldi	r18, 0x33	; 51
 2a4:	33 e3       	ldi	r19, 0x33	; 51
 2a6:	43 e7       	ldi	r20, 0x73	; 115
 2a8:	5f e3       	ldi	r21, 0x3F	; 63
 2aa:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 2ae:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 2b2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 2b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 2ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	return gyro_angle_filter;
}
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	08 95       	ret

000002c8 <direction>:
	else {DC = DC;}
}

void direction(int direction) // when angle is 0
{
    set(PORTB, 7);
 2c8:	2f 9a       	sbi	0x05, 7	; 5
	if (direction)
 2ca:	89 2b       	or	r24, r25
 2cc:	39 f0       	breq	.+14     	; 0x2dc <direction+0x14>
	{
		set(PORTF, 6);
 2ce:	8e 9a       	sbi	0x11, 6	; 17
		clear(PORTF, 7); // positive direction 
 2d0:	8f 98       	cbi	0x11, 7	; 17
		m_red(OFF);
 2d2:	6e 9a       	sbi	0x0d, 6	; 13
 2d4:	76 9a       	sbi	0x0e, 6	; 14
		m_green(ON);
 2d6:	6a 9a       	sbi	0x0d, 2	; 13
 2d8:	72 98       	cbi	0x0e, 2	; 14
 2da:	08 95       	ret
	}
	else
	{
		clear(PORTF, 6);
 2dc:	8e 98       	cbi	0x11, 6	; 17
		set(PORTF, 7); // negative direction 
 2de:	8f 9a       	sbi	0x11, 7	; 17
		m_red(ON);
 2e0:	6e 9a       	sbi	0x0d, 6	; 13
 2e2:	76 98       	cbi	0x0e, 6	; 14
		m_green(OFF);
 2e4:	6a 9a       	sbi	0x0d, 2	; 13
 2e6:	72 9a       	sbi	0x0e, 2	; 14
 2e8:	08 95       	ret

000002ea <PID>:
	gyro_angle_filter = (filter) * (gyro_angle_filter + y_gyro_angle - prev_y_gyro_angle); // high pass filter
	return gyro_angle_filter;
}

void PID()  //offset
{
 2ea:	8f 92       	push	r8
 2ec:	9f 92       	push	r9
 2ee:	af 92       	push	r10
 2f0:	bf 92       	push	r11
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	float P = 0;
	float I = 0;
	float D = 0;
	
	prev_angle = angle;
	angle = get_acc() + get_gyro();
 2fe:	0e 94 bc 00 	call	0x178	; 0x178 <get_acc>
 302:	6b 01       	movw	r12, r22
 304:	7c 01       	movw	r14, r24
 306:	0e 94 fe 00 	call	0x1fc	; 0x1fc <get_gyro>
 30a:	9b 01       	movw	r18, r22
 30c:	ac 01       	movw	r20, r24
 30e:	c7 01       	movw	r24, r14
 310:	b6 01       	movw	r22, r12
 312:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 316:	6b 01       	movw	r12, r22
 318:	7c 01       	movw	r14, r24
	P = angle * Kp; // Proportional
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 ef       	ldi	r20, 0xF0	; 240
 320:	51 e4       	ldi	r21, 0x41	; 65
 322:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 326:	4b 01       	movw	r8, r22
 328:	5c 01       	movw	r10, r24
	I = I + angle * Ki; // Integral
 32a:	2d ec       	ldi	r18, 0xCD	; 205
 32c:	3c ec       	ldi	r19, 0xCC	; 204
 32e:	4c ec       	ldi	r20, 0xCC	; 204
 330:	5d e3       	ldi	r21, 0x3D	; 61
 332:	c7 01       	movw	r24, r14
 334:	b6 01       	movw	r22, r12
 336:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	a9 01       	movw	r20, r18
 340:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 344:	9b 01       	movw	r18, r22
 346:	ac 01       	movw	r20, r24
	D = (angle - prev_angle) * Kd; // Derivative
	float pid = P + I + D;
 348:	c5 01       	movw	r24, r10
 34a:	b4 01       	movw	r22, r8
 34c:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 350:	4b 01       	movw	r8, r22
 352:	5c 01       	movw	r10, r24
	
	prev_angle = angle;
	angle = get_acc() + get_gyro();
	P = angle * Kp; // Proportional
	I = I + angle * Ki; // Integral
	D = (angle - prev_angle) * Kd; // Derivative
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	4c e8       	ldi	r20, 0x8C	; 140
 35a:	52 e4       	ldi	r21, 0x42	; 66
 35c:	c7 01       	movw	r24, r14
 35e:	b6 01       	movw	r22, r12
 360:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
	float pid = P + I + D;
 368:	c5 01       	movw	r24, r10
 36a:	b4 01       	movw	r22, r8
 36c:	0e 94 c7 03 	call	0x78e	; 0x78e <__addsf3>
 370:	4b 01       	movw	r8, r22
 372:	5c 01       	movw	r10, r24

	int sign = (angle > 0); // check the angle sign for direction
 374:	c1 e0       	ldi	r28, 0x01	; 1
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	a9 01       	movw	r20, r18
 37e:	c7 01       	movw	r24, r14
 380:	b6 01       	movw	r22, r12
 382:	0e 94 62 05 	call	0xac4	; 0xac4 <__gesf2>
 386:	18 16       	cp	r1, r24
 388:	14 f0       	brlt	.+4      	; 0x38e <PID+0xa4>
 38a:	c0 e0       	ldi	r28, 0x00	; 0
 38c:	d0 e0       	ldi	r29, 0x00	; 0
	direction(sign); // direction output
 38e:	ce 01       	movw	r24, r28
 390:	0e 94 64 01 	call	0x2c8	; 0x2c8 <direction>
	
	DC = fabs(pid); // Duty Cycle output, not larger than 0.75
 394:	75 01       	movw	r14, r10
 396:	64 01       	movw	r12, r8
 398:	e8 94       	clt
 39a:	f7 f8       	bld	r15, 7
	if (DC > DC_max){DC = DC_max;}
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e4       	ldi	r20, 0x40	; 64
 3a2:	5f e3       	ldi	r21, 0x3F	; 63
 3a4:	c7 01       	movw	r24, r14
 3a6:	b6 01       	movw	r22, r12
 3a8:	0e 94 62 05 	call	0xac4	; 0xac4 <__gesf2>
 3ac:	18 16       	cp	r1, r24
 3ae:	4c f0       	brlt	.+18     	; 0x3c2 <PID+0xd8>
	float pid = P + I + D;

	int sign = (angle > 0); // check the angle sign for direction
	direction(sign); // direction output
	
	DC = fabs(pid); // Duty Cycle output, not larger than 0.75
 3b0:	c0 92 12 01 	sts	0x0112, r12	; 0x800112 <DC>
 3b4:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <DC+0x1>
 3b8:	e0 92 14 01 	sts	0x0114, r14	; 0x800114 <DC+0x2>
 3bc:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <DC+0x3>
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <PID+0xf0>
	if (DC > DC_max){DC = DC_max;}
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	a0 e4       	ldi	r26, 0x40	; 64
 3c8:	bf e3       	ldi	r27, 0x3F	; 63
 3ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <DC>
 3ce:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <DC+0x1>
 3d2:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <DC+0x2>
 3d6:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <DC+0x3>
	else {DC = DC;}
}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	bf 90       	pop	r11
 3e8:	af 90       	pop	r10
 3ea:	9f 90       	pop	r9
 3ec:	8f 90       	pop	r8
 3ee:	08 95       	ret

000003f0 <main>:
float get_gyro(); // get current angle from gyrometer


int main(void)
{
    m_clockdivide(0); //16 mhz
 3f0:	e1 e6       	ldi	r30, 0x61	; 97
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	c0 e8       	ldi	r28, 0x80	; 128
 3f6:	c0 83       	st	Z, r28
 3f8:	10 82       	st	Z, r1
	init_imu();
 3fa:	0e 94 b7 00 	call	0x16e	; 0x16e <init_imu>
	init_timer1();
 3fe:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_timer1>
	init_timer3();
 402:	0e 94 91 00 	call	0x122	; 0x122 <init_timer3>
	m_disableJTAG(); // turn off JTAG port and allow access to F6,F7 as GPIO
 406:	c5 bf       	out	0x35, r28	; 53
 408:	c5 bf       	out	0x35, r28	; 53

	set(DDRF, 6); 
 40a:	86 9a       	sbi	0x10, 6	; 16
	set(DDRF, 7); 
 40c:	87 9a       	sbi	0x10, 7	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40e:	2f e7       	ldi	r18, 0x7F	; 127
 410:	8a e1       	ldi	r24, 0x1A	; 26
 412:	96 e0       	ldi	r25, 0x06	; 6
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	{
	   if(flag_IMU)
			{
				PID();
				flag_IMU = 0;
				OCR1C= OCR1A*DC;
 420:	08 e8       	ldi	r16, 0x88	; 136
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	cc e8       	ldi	r28, 0x8C	; 140
 426:	d0 e0       	ldi	r29, 0x00	; 0
	set(DDRF, 6); 
	set(DDRF, 7); 
	m_wait(2000);
    while(1)
	{
	   if(flag_IMU)
 428:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <flag_IMU>
 42c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <flag_IMU+0x1>
 430:	89 2b       	or	r24, r25
 432:	d1 f3       	breq	.-12     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
			{
				PID();
 434:	0e 94 75 01 	call	0x2ea	; 0x2ea <PID>
				flag_IMU = 0;
 438:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag_IMU+0x1>
 43c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag_IMU>
				OCR1C= OCR1A*DC;
 440:	f8 01       	movw	r30, r16
 442:	60 81       	ld	r22, Z
 444:	71 81       	ldd	r23, Z+1	; 0x01
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatunsisf>
 44e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <DC>
 452:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <DC+0x1>
 456:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <DC+0x2>
 45a:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <DC+0x3>
 45e:	0e 94 67 05 	call	0xace	; 0xace <__mulsf3>
 462:	0e 94 a5 04 	call	0x94a	; 0x94a <__fixunssfsi>
 466:	79 83       	std	Y+1, r23	; 0x01
 468:	68 83       	st	Y, r22
 46a:	de cf       	rjmp	.-68     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>

0000046c <__vector_32>:
	}
}


ISR(TIMER3_COMPA_vect)
{
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
		
	    if(flag_IMU) 
 48e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <flag_IMU>
 492:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <flag_IMU+0x1>
 496:	89 2b       	or	r24, r25
 498:	51 f4       	brne	.+20     	; 0x4ae <__vector_32+0x42>
		{}                                                                                                                                                                                                                                                                                                                                                                         
		else 
		{
		m_imu_raw(data);
 49a:	86 e1       	ldi	r24, 0x16	; 22
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <m_imu_raw>
		flag_IMU = 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <flag_IMU+0x1>
 4aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <flag_IMU>
		}
 4ae:	ff 91       	pop	r31
 4b0:	ef 91       	pop	r30
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	5f 91       	pop	r21
 4c0:	4f 91       	pop	r20
 4c2:	3f 91       	pop	r19
 4c4:	2f 91       	pop	r18
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <m_bus_init>:
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 4d0:	58 9a       	sbi	0x0b, 0	; 11
 4d2:	59 9a       	sbi	0x0b, 1	; 11
 4d4:	5a 9a       	sbi	0x0b, 2	; 11
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 4dc:	e9 e6       	ldi	r30, 0x69	; 105
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	80 62       	ori	r24, 0x20	; 32
 4e4:	80 83       	st	Z, r24
 4e6:	80 81       	ld	r24, Z
 4e8:	8f 7e       	andi	r24, 0xEF	; 239
 4ea:	80 83       	st	Z, r24
 4ec:	ea 9a       	sbi	0x1d, 2	; 29
 4ee:	78 94       	sei
 4f0:	08 95       	ret

000004f2 <twi_read_byte>:
 4f2:	84 e8       	ldi	r24, 0x84	; 132
 4f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4f8:	ec eb       	ldi	r30, 0xBC	; 188
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	88 23       	and	r24, r24
 500:	ec f7       	brge	.-6      	; 0x4fc <twi_read_byte+0xa>
 502:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 506:	08 95       	ret

00000508 <twi_wait_for_ack>:
}

// TWI:  wait for ACK packet (0=fail, 1=success)
unsigned char twi_wait_for_ack(void)
{
	unsigned int wait=0;
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<MAX_WAIT)){};	// wait for acknowledgement that the byte was sent
 50c:	ec eb       	ldi	r30, 0xBC	; 188
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	88 23       	and	r24, r24
 514:	34 f0       	brlt	.+12     	; 0x522 <twi_wait_for_ack+0x1a>
 516:	2f 5f       	subi	r18, 0xFF	; 255
 518:	3f 4f       	sbci	r19, 0xFF	; 255
 51a:	29 3e       	cpi	r18, 0xE9	; 233
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	38 07       	cpc	r19, r24
 520:	b9 f7       	brne	.-18     	; 0x510 <twi_wait_for_ack+0x8>
    return (wait==MAX_WAIT? 0 : 1);
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	28 3e       	cpi	r18, 0xE8	; 232
 526:	33 40       	sbci	r19, 0x03	; 3
 528:	09 f4       	brne	.+2      	; 0x52c <twi_wait_for_ack+0x24>
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret

0000052e <twi_send_byte>:
}

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
 52e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
 532:	84 e8       	ldi	r24, 0x84	; 132
 534:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
 538:	0e 94 84 02 	call	0x508	; 0x508 <twi_wait_for_ack>
 53c:	88 23       	and	r24, r24
 53e:	19 f0       	breq	.+6      	; 0x546 <twi_send_byte+0x18>
 540:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 544:	88 7f       	andi	r24, 0xF8	; 248
}
 546:	08 95       	ret

00000548 <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	c8 2f       	mov	r28, r24
 54e:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 550:	84 ea       	ldi	r24, 0xA4	; 164
 552:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    if(!twi_wait_for_ack()){
 556:	0e 94 84 02 	call	0x508	; 0x508 <twi_wait_for_ack>
 55a:	81 11       	cpse	r24, r1
 55c:	04 c0       	rjmp	.+8      	; 0x566 <twi_start+0x1e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 55e:	94 e9       	ldi	r25, 0x94	; 148
 560:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 564:	1c c0       	rjmp	.+56     	; 0x59e <twi_start+0x56>
        twi_stop();
        return 0; // COMM failure
    }
    
    // ADDRESS packet:
    if(readwrite)
 566:	dd 23       	and	r29, r29
 568:	61 f0       	breq	.+24     	; 0x582 <twi_start+0x3a>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
 56a:	8c 2f       	mov	r24, r28
 56c:	88 0f       	add	r24, r24
 56e:	8f 5f       	subi	r24, 0xFF	; 255
 570:	0e 94 97 02 	call	0x52e	; 0x52e <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
 574:	88 34       	cpi	r24, 0x48	; 72
 576:	81 f4       	brne	.+32     	; 0x598 <twi_start+0x50>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 578:	84 e9       	ldi	r24, 0x94	; 148
 57a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    if(readwrite)
    { // READ
        status = twi_send_byte(((address<<1) + 1));
        if(status== 0x48){ // ACK was not received - may not be connected/listening
            twi_stop();    
            return 0;	// failure
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	0e c0       	rjmp	.+28     	; 0x59e <twi_start+0x56>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
 582:	8c 2f       	mov	r24, r28
 584:	88 0f       	add	r24, r24
 586:	0e 94 97 02 	call	0x52e	; 0x52e <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
 58a:	80 32       	cpi	r24, 0x20	; 32
 58c:	39 f4       	brne	.+14     	; 0x59c <twi_start+0x54>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 58e:	84 e9       	ldi	r24, 0x94	; 148
 590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
        if(status== 0x20){ // ACK was not received - may not be connected/listening
            twi_stop();
            return 0;	// failure
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	03 c0       	rjmp	.+6      	; 0x59e <twi_start+0x56>
        }	        
    }
    return 1;	// success
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	01 c0       	rjmp	.+2      	; 0x59e <twi_start+0x56>
 59c:	81 e0       	ldi	r24, 0x01	; 1
    
}
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	c8 2f       	mov	r28, r24
 5aa:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	0e 94 a4 02 	call	0x548	; 0x548 <twi_start>
 5b2:	88 23       	and	r24, r24
 5b4:	79 f0       	breq	.+30     	; 0x5d4 <m_read_register+0x30>
	if(!twi_send_byte(reg)) return 0;    // register to read
 5b6:	8d 2f       	mov	r24, r29
 5b8:	0e 94 97 02 	call	0x52e	; 0x52e <twi_send_byte>
 5bc:	88 23       	and	r24, r24
 5be:	51 f0       	breq	.+20     	; 0x5d4 <m_read_register+0x30>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 5c0:	84 e9       	ldi	r24, 0x94	; 148
 5c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to read
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	8c 2f       	mov	r24, r28
 5ca:	0e 94 a4 02 	call	0x548	; 0x548 <twi_start>
 5ce:	81 11       	cpse	r24, r1
	return(twi_read_byte());             // return register value
 5d0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <twi_read_byte>
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <m_write_register>:

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	c6 2f       	mov	r28, r22
 5e0:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	0e 94 a4 02 	call	0x548	; 0x548 <twi_start>
 5e8:	88 23       	and	r24, r24
 5ea:	71 f0       	breq	.+28     	; 0x608 <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
 5ec:	8c 2f       	mov	r24, r28
 5ee:	0e 94 97 02 	call	0x52e	; 0x52e <twi_send_byte>
 5f2:	88 23       	and	r24, r24
 5f4:	49 f0       	breq	.+18     	; 0x608 <m_write_register+0x2e>
    if(!twi_send_byte(value)) return 0;  // value
 5f6:	8d 2f       	mov	r24, r29
 5f8:	0e 94 97 02 	call	0x52e	; 0x52e <twi_send_byte>
 5fc:	88 23       	and	r24, r24
 5fe:	21 f0       	breq	.+8      	; 0x608 <m_write_register+0x2e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 600:	84 e9       	ldi	r24, 0x94	; 148
 602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to write to
    if(!twi_send_byte(value)) return 0;  // value
    twi_stop();                          // STOP
    return(1);
 606:	81 e0       	ldi	r24, 0x01	; 1
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <m_imu_init>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
 612:	84 30       	cpi	r24, 0x04	; 4
 614:	08 f0       	brcs	.+2      	; 0x618 <m_imu_init+0xa>
 616:	60 c0       	rjmp	.+192    	; 0x6d8 <m_imu_init+0xca>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
 618:	64 30       	cpi	r22, 0x04	; 4
 61a:	08 f0       	brcs	.+2      	; 0x61e <m_imu_init+0x10>
 61c:	5f c0       	rjmp	.+190    	; 0x6dc <m_imu_init+0xce>
 61e:	d6 2f       	mov	r29, r22
 620:	c8 2f       	mov	r28, r24

	m_bus_init();
 622:	0e 94 68 02 	call	0x4d0	; 0x4d0 <m_bus_init>
 626:	2f e5       	ldi	r18, 0x5F	; 95
 628:	8a ee       	ldi	r24, 0xEA	; 234
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <m_imu_init+0x1e>
 634:	00 c0       	rjmp	.+0      	; 0x636 <m_imu_init+0x28>
 636:	00 00       	nop
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
 638:	65 e7       	ldi	r22, 0x75	; 117
 63a:	89 e6       	ldi	r24, 0x69	; 105
 63c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <m_read_register>
 640:	88 36       	cpi	r24, 0x68	; 104
 642:	09 f0       	breq	.+2      	; 0x646 <m_imu_init+0x38>
 644:	4d c0       	rjmp	.+154    	; 0x6e0 <m_imu_init+0xd2>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
 646:	41 e0       	ldi	r20, 0x01	; 1
 648:	6b e6       	ldi	r22, 0x6B	; 107
 64a:	89 e6       	ldi	r24, 0x69	; 105
 64c:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
 650:	4c 2f       	mov	r20, r28
 652:	44 0f       	add	r20, r20
 654:	44 0f       	add	r20, r20
 656:	44 0f       	add	r20, r20
 658:	6c e1       	ldi	r22, 0x1C	; 28
 65a:	89 e6       	ldi	r24, 0x69	; 105
 65c:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
 660:	4d 2f       	mov	r20, r29
 662:	44 0f       	add	r20, r20
 664:	44 0f       	add	r20, r20
 666:	44 0f       	add	r20, r20
 668:	6b e1       	ldi	r22, 0x1B	; 27
 66a:	89 e6       	ldi	r24, 0x69	; 105
 66c:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
 670:	42 e0       	ldi	r20, 0x02	; 2
 672:	67 e3       	ldi	r22, 0x37	; 55
 674:	89 e6       	ldi	r24, 0x69	; 105
 676:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	62 e0       	ldi	r22, 0x02	; 2
 67e:	8e e1       	ldi	r24, 0x1E	; 30
 680:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	67 e3       	ldi	r22, 0x37	; 55
 688:	89 e6       	ldi	r24, 0x69	; 105
 68a:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
 68e:	4e e1       	ldi	r20, 0x1E	; 30
 690:	64 e3       	ldi	r22, 0x34	; 52
 692:	89 e6       	ldi	r24, 0x69	; 105
 694:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    m_write_register(MIMU,0x67,0x01);
 698:	41 e0       	ldi	r20, 0x01	; 1
 69a:	67 e6       	ldi	r22, 0x67	; 103
 69c:	89 e6       	ldi	r24, 0x69	; 105
 69e:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
 6a2:	4d e1       	ldi	r20, 0x1D	; 29
 6a4:	64 e2       	ldi	r22, 0x24	; 36
 6a6:	89 e6       	ldi	r24, 0x69	; 105
 6a8:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
 6ac:	4e e9       	ldi	r20, 0x9E	; 158
 6ae:	65 e2       	ldi	r22, 0x25	; 37
 6b0:	89 e6       	ldi	r24, 0x69	; 105
 6b2:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
 6b6:	43 e0       	ldi	r20, 0x03	; 3
 6b8:	66 e2       	ldi	r22, 0x26	; 38
 6ba:	89 e6       	ldi	r24, 0x69	; 105
 6bc:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
 6c0:	46 e9       	ldi	r20, 0x96	; 150
 6c2:	67 e2       	ldi	r22, 0x27	; 39
 6c4:	89 e6       	ldi	r24, 0x69	; 105
 6c6:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
 6ca:	40 e2       	ldi	r20, 0x20	; 32
 6cc:	6a e6       	ldi	r22, 0x6A	; 106
 6ce:	89 e6       	ldi	r24, 0x69	; 105
 6d0:	0e 94 ed 02 	call	0x5da	; 0x5da <m_write_register>
    
    return 1;   // SUCCESS!
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <m_imu_init+0xd4>
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <m_imu_init+0xd4>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <m_imu_init+0xd4>

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
 6e0:	80 e0       	ldi	r24, 0x00	; 0
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	08 95       	ret

000006e8 <m_imu_raw>:
// (41:42) TH:TL
// (43:44) GXH:GXL, (45:46) GYH:GYL, (47:48) GZH:GZL
// (49:4A) MXH:MXL, (4B:4C) MYH:MYL, (4D:4E) MZH:MZL

unsigned char m_imu_raw(int* raw_data)
{
 6e8:	cf 92       	push	r12
 6ea:	df 92       	push	r13
 6ec:	ef 92       	push	r14
 6ee:	ff 92       	push	r15
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	64 97       	sbiw	r28, 0x14	; 20
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	f8 94       	cli
 700:	de bf       	out	0x3e, r29	; 62
 702:	0f be       	out	0x3f, r0	; 63
 704:	cd bf       	out	0x3d, r28	; 61
 706:	6c 01       	movw	r12, r24
 708:	ce 01       	movw	r24, r28
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	7c 01       	movw	r14, r24
 70e:	1e e4       	ldi	r17, 0x4E	; 78
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
 710:	61 2f       	mov	r22, r17
 712:	89 e6       	ldi	r24, 0x69	; 105
 714:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <m_read_register>
 718:	f7 01       	movw	r30, r14
 71a:	81 93       	st	Z+, r24
 71c:	7f 01       	movw	r14, r30
 71e:	11 50       	subi	r17, 0x01	; 1
unsigned char m_imu_raw(int* raw_data)
{
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
 720:	1a 33       	cpi	r17, 0x3A	; 58
 722:	b1 f7       	brne	.-20     	; 0x710 <m_imu_raw+0x28>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 724:	8f 85       	ldd	r24, Y+15	; 0x0f
 726:	98 89       	ldd	r25, Y+16	; 0x10
 728:	f6 01       	movw	r30, r12
 72a:	95 83       	std	Z+5, r25	; 0x05
 72c:	84 83       	std	Z+4, r24	; 0x04
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 72e:	8f 81       	ldd	r24, Y+7	; 0x07
 730:	98 85       	ldd	r25, Y+8	; 0x08
 732:	93 87       	std	Z+11, r25	; 0x0b
 734:	82 87       	std	Z+10, r24	; 0x0a
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 736:	89 81       	ldd	r24, Y+1	; 0x01
 738:	9a 81       	ldd	r25, Y+2	; 0x02
 73a:	91 8b       	std	Z+17, r25	; 0x11
 73c:	80 8b       	std	Z+16, r24	; 0x10
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 73e:	89 89       	ldd	r24, Y+17	; 0x11
 740:	9a 89       	ldd	r25, Y+18	; 0x12
 742:	93 83       	std	Z+3, r25	; 0x03
 744:	82 83       	std	Z+2, r24	; 0x02
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 746:	89 85       	ldd	r24, Y+9	; 0x09
 748:	9a 85       	ldd	r25, Y+10	; 0x0a
 74a:	91 87       	std	Z+9, r25	; 0x09
 74c:	80 87       	std	Z+8, r24	; 0x08
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	9c 81       	ldd	r25, Y+4	; 0x04
 752:	97 87       	std	Z+15, r25	; 0x0f
 754:	86 87       	std	Z+14, r24	; 0x0e
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
 756:	8b 89       	ldd	r24, Y+19	; 0x13
 758:	9c 89       	ldd	r25, Y+20	; 0x14
 75a:	91 83       	std	Z+1, r25	; 0x01
 75c:	80 83       	st	Z, r24
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
 75e:	8b 85       	ldd	r24, Y+11	; 0x0b
 760:	9c 85       	ldd	r25, Y+12	; 0x0c
 762:	97 83       	std	Z+7, r25	; 0x07
 764:	86 83       	std	Z+6, r24	; 0x06
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
 766:	8d 81       	ldd	r24, Y+5	; 0x05
 768:	9e 81       	ldd	r25, Y+6	; 0x06
 76a:	95 87       	std	Z+13, r25	; 0x0d
 76c:	84 87       	std	Z+12, r24	; 0x0c
    }
    return 1;
}
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	64 96       	adiw	r28, 0x14	; 20
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	ff 90       	pop	r15
 784:	ef 90       	pop	r14
 786:	df 90       	pop	r13
 788:	cf 90       	pop	r12
 78a:	08 95       	ret

0000078c <__subsf3>:
 78c:	50 58       	subi	r21, 0x80	; 128

0000078e <__addsf3>:
 78e:	bb 27       	eor	r27, r27
 790:	aa 27       	eor	r26, r26
 792:	0e 94 de 03 	call	0x7bc	; 0x7bc <__addsf3x>
 796:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_round>
 79a:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_pscA>
 79e:	38 f0       	brcs	.+14     	; 0x7ae <__addsf3+0x20>
 7a0:	0e 94 21 05 	call	0xa42	; 0xa42 <__fp_pscB>
 7a4:	20 f0       	brcs	.+8      	; 0x7ae <__addsf3+0x20>
 7a6:	39 f4       	brne	.+14     	; 0x7b6 <__addsf3+0x28>
 7a8:	9f 3f       	cpi	r25, 0xFF	; 255
 7aa:	19 f4       	brne	.+6      	; 0x7b2 <__addsf3+0x24>
 7ac:	26 f4       	brtc	.+8      	; 0x7b6 <__addsf3+0x28>
 7ae:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_nan>
 7b2:	0e f4       	brtc	.+2      	; 0x7b6 <__addsf3+0x28>
 7b4:	e0 95       	com	r30
 7b6:	e7 fb       	bst	r30, 7
 7b8:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_inf>

000007bc <__addsf3x>:
 7bc:	e9 2f       	mov	r30, r25
 7be:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_split3>
 7c2:	58 f3       	brcs	.-42     	; 0x79a <__addsf3+0xc>
 7c4:	ba 17       	cp	r27, r26
 7c6:	62 07       	cpc	r22, r18
 7c8:	73 07       	cpc	r23, r19
 7ca:	84 07       	cpc	r24, r20
 7cc:	95 07       	cpc	r25, r21
 7ce:	20 f0       	brcs	.+8      	; 0x7d8 <__addsf3x+0x1c>
 7d0:	79 f4       	brne	.+30     	; 0x7f0 <__addsf3x+0x34>
 7d2:	a6 f5       	brtc	.+104    	; 0x83c <__addsf3x+0x80>
 7d4:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_zero>
 7d8:	0e f4       	brtc	.+2      	; 0x7dc <__addsf3x+0x20>
 7da:	e0 95       	com	r30
 7dc:	0b 2e       	mov	r0, r27
 7de:	ba 2f       	mov	r27, r26
 7e0:	a0 2d       	mov	r26, r0
 7e2:	0b 01       	movw	r0, r22
 7e4:	b9 01       	movw	r22, r18
 7e6:	90 01       	movw	r18, r0
 7e8:	0c 01       	movw	r0, r24
 7ea:	ca 01       	movw	r24, r20
 7ec:	a0 01       	movw	r20, r0
 7ee:	11 24       	eor	r1, r1
 7f0:	ff 27       	eor	r31, r31
 7f2:	59 1b       	sub	r21, r25
 7f4:	99 f0       	breq	.+38     	; 0x81c <__addsf3x+0x60>
 7f6:	59 3f       	cpi	r21, 0xF9	; 249
 7f8:	50 f4       	brcc	.+20     	; 0x80e <__addsf3x+0x52>
 7fa:	50 3e       	cpi	r21, 0xE0	; 224
 7fc:	68 f1       	brcs	.+90     	; 0x858 <__addsf3x+0x9c>
 7fe:	1a 16       	cp	r1, r26
 800:	f0 40       	sbci	r31, 0x00	; 0
 802:	a2 2f       	mov	r26, r18
 804:	23 2f       	mov	r18, r19
 806:	34 2f       	mov	r19, r20
 808:	44 27       	eor	r20, r20
 80a:	58 5f       	subi	r21, 0xF8	; 248
 80c:	f3 cf       	rjmp	.-26     	; 0x7f4 <__addsf3x+0x38>
 80e:	46 95       	lsr	r20
 810:	37 95       	ror	r19
 812:	27 95       	ror	r18
 814:	a7 95       	ror	r26
 816:	f0 40       	sbci	r31, 0x00	; 0
 818:	53 95       	inc	r21
 81a:	c9 f7       	brne	.-14     	; 0x80e <__addsf3x+0x52>
 81c:	7e f4       	brtc	.+30     	; 0x83c <__addsf3x+0x80>
 81e:	1f 16       	cp	r1, r31
 820:	ba 0b       	sbc	r27, r26
 822:	62 0b       	sbc	r22, r18
 824:	73 0b       	sbc	r23, r19
 826:	84 0b       	sbc	r24, r20
 828:	ba f0       	brmi	.+46     	; 0x858 <__addsf3x+0x9c>
 82a:	91 50       	subi	r25, 0x01	; 1
 82c:	a1 f0       	breq	.+40     	; 0x856 <__addsf3x+0x9a>
 82e:	ff 0f       	add	r31, r31
 830:	bb 1f       	adc	r27, r27
 832:	66 1f       	adc	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	c2 f7       	brpl	.-16     	; 0x82a <__addsf3x+0x6e>
 83a:	0e c0       	rjmp	.+28     	; 0x858 <__addsf3x+0x9c>
 83c:	ba 0f       	add	r27, r26
 83e:	62 1f       	adc	r22, r18
 840:	73 1f       	adc	r23, r19
 842:	84 1f       	adc	r24, r20
 844:	48 f4       	brcc	.+18     	; 0x858 <__addsf3x+0x9c>
 846:	87 95       	ror	r24
 848:	77 95       	ror	r23
 84a:	67 95       	ror	r22
 84c:	b7 95       	ror	r27
 84e:	f7 95       	ror	r31
 850:	9e 3f       	cpi	r25, 0xFE	; 254
 852:	08 f0       	brcs	.+2      	; 0x856 <__addsf3x+0x9a>
 854:	b0 cf       	rjmp	.-160    	; 0x7b6 <__addsf3+0x28>
 856:	93 95       	inc	r25
 858:	88 0f       	add	r24, r24
 85a:	08 f0       	brcs	.+2      	; 0x85e <__addsf3x+0xa2>
 85c:	99 27       	eor	r25, r25
 85e:	ee 0f       	add	r30, r30
 860:	97 95       	ror	r25
 862:	87 95       	ror	r24
 864:	08 95       	ret

00000866 <__divsf3>:
 866:	0e 94 47 04 	call	0x88e	; 0x88e <__divsf3x>
 86a:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_round>
 86e:	0e 94 21 05 	call	0xa42	; 0xa42 <__fp_pscB>
 872:	58 f0       	brcs	.+22     	; 0x88a <__divsf3+0x24>
 874:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_pscA>
 878:	40 f0       	brcs	.+16     	; 0x88a <__divsf3+0x24>
 87a:	29 f4       	brne	.+10     	; 0x886 <__divsf3+0x20>
 87c:	5f 3f       	cpi	r21, 0xFF	; 255
 87e:	29 f0       	breq	.+10     	; 0x88a <__divsf3+0x24>
 880:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_inf>
 884:	51 11       	cpse	r21, r1
 886:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_szero>
 88a:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_nan>

0000088e <__divsf3x>:
 88e:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_split3>
 892:	68 f3       	brcs	.-38     	; 0x86e <__divsf3+0x8>

00000894 <__divsf3_pse>:
 894:	99 23       	and	r25, r25
 896:	b1 f3       	breq	.-20     	; 0x884 <__divsf3+0x1e>
 898:	55 23       	and	r21, r21
 89a:	91 f3       	breq	.-28     	; 0x880 <__divsf3+0x1a>
 89c:	95 1b       	sub	r25, r21
 89e:	55 0b       	sbc	r21, r21
 8a0:	bb 27       	eor	r27, r27
 8a2:	aa 27       	eor	r26, r26
 8a4:	62 17       	cp	r22, r18
 8a6:	73 07       	cpc	r23, r19
 8a8:	84 07       	cpc	r24, r20
 8aa:	38 f0       	brcs	.+14     	; 0x8ba <__divsf3_pse+0x26>
 8ac:	9f 5f       	subi	r25, 0xFF	; 255
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255
 8b0:	22 0f       	add	r18, r18
 8b2:	33 1f       	adc	r19, r19
 8b4:	44 1f       	adc	r20, r20
 8b6:	aa 1f       	adc	r26, r26
 8b8:	a9 f3       	breq	.-22     	; 0x8a4 <__divsf3_pse+0x10>
 8ba:	35 d0       	rcall	.+106    	; 0x926 <__divsf3_pse+0x92>
 8bc:	0e 2e       	mov	r0, r30
 8be:	3a f0       	brmi	.+14     	; 0x8ce <__divsf3_pse+0x3a>
 8c0:	e0 e8       	ldi	r30, 0x80	; 128
 8c2:	32 d0       	rcall	.+100    	; 0x928 <__divsf3_pse+0x94>
 8c4:	91 50       	subi	r25, 0x01	; 1
 8c6:	50 40       	sbci	r21, 0x00	; 0
 8c8:	e6 95       	lsr	r30
 8ca:	00 1c       	adc	r0, r0
 8cc:	ca f7       	brpl	.-14     	; 0x8c0 <__divsf3_pse+0x2c>
 8ce:	2b d0       	rcall	.+86     	; 0x926 <__divsf3_pse+0x92>
 8d0:	fe 2f       	mov	r31, r30
 8d2:	29 d0       	rcall	.+82     	; 0x926 <__divsf3_pse+0x92>
 8d4:	66 0f       	add	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	88 1f       	adc	r24, r24
 8da:	bb 1f       	adc	r27, r27
 8dc:	26 17       	cp	r18, r22
 8de:	37 07       	cpc	r19, r23
 8e0:	48 07       	cpc	r20, r24
 8e2:	ab 07       	cpc	r26, r27
 8e4:	b0 e8       	ldi	r27, 0x80	; 128
 8e6:	09 f0       	breq	.+2      	; 0x8ea <__divsf3_pse+0x56>
 8e8:	bb 0b       	sbc	r27, r27
 8ea:	80 2d       	mov	r24, r0
 8ec:	bf 01       	movw	r22, r30
 8ee:	ff 27       	eor	r31, r31
 8f0:	93 58       	subi	r25, 0x83	; 131
 8f2:	5f 4f       	sbci	r21, 0xFF	; 255
 8f4:	3a f0       	brmi	.+14     	; 0x904 <__divsf3_pse+0x70>
 8f6:	9e 3f       	cpi	r25, 0xFE	; 254
 8f8:	51 05       	cpc	r21, r1
 8fa:	78 f0       	brcs	.+30     	; 0x91a <__divsf3_pse+0x86>
 8fc:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_inf>
 900:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_szero>
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	e4 f3       	brlt	.-8      	; 0x900 <__divsf3_pse+0x6c>
 908:	98 3e       	cpi	r25, 0xE8	; 232
 90a:	d4 f3       	brlt	.-12     	; 0x900 <__divsf3_pse+0x6c>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	9f 5f       	subi	r25, 0xFF	; 255
 918:	c9 f7       	brne	.-14     	; 0x90c <__divsf3_pse+0x78>
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret
 926:	e1 e0       	ldi	r30, 0x01	; 1
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	bb 1f       	adc	r27, r27
 930:	62 17       	cp	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	ba 07       	cpc	r27, r26
 938:	20 f0       	brcs	.+8      	; 0x942 <__divsf3_pse+0xae>
 93a:	62 1b       	sub	r22, r18
 93c:	73 0b       	sbc	r23, r19
 93e:	84 0b       	sbc	r24, r20
 940:	ba 0b       	sbc	r27, r26
 942:	ee 1f       	adc	r30, r30
 944:	88 f7       	brcc	.-30     	; 0x928 <__divsf3_pse+0x94>
 946:	e0 95       	com	r30
 948:	08 95       	ret

0000094a <__fixunssfsi>:
 94a:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_splitA>
 94e:	88 f0       	brcs	.+34     	; 0x972 <__fixunssfsi+0x28>
 950:	9f 57       	subi	r25, 0x7F	; 127
 952:	98 f0       	brcs	.+38     	; 0x97a <__fixunssfsi+0x30>
 954:	b9 2f       	mov	r27, r25
 956:	99 27       	eor	r25, r25
 958:	b7 51       	subi	r27, 0x17	; 23
 95a:	b0 f0       	brcs	.+44     	; 0x988 <__fixunssfsi+0x3e>
 95c:	e1 f0       	breq	.+56     	; 0x996 <__fixunssfsi+0x4c>
 95e:	66 0f       	add	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	99 1f       	adc	r25, r25
 966:	1a f0       	brmi	.+6      	; 0x96e <__fixunssfsi+0x24>
 968:	ba 95       	dec	r27
 96a:	c9 f7       	brne	.-14     	; 0x95e <__fixunssfsi+0x14>
 96c:	14 c0       	rjmp	.+40     	; 0x996 <__fixunssfsi+0x4c>
 96e:	b1 30       	cpi	r27, 0x01	; 1
 970:	91 f0       	breq	.+36     	; 0x996 <__fixunssfsi+0x4c>
 972:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_zero>
 976:	b1 e0       	ldi	r27, 0x01	; 1
 978:	08 95       	ret
 97a:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_zero>
 97e:	67 2f       	mov	r22, r23
 980:	78 2f       	mov	r23, r24
 982:	88 27       	eor	r24, r24
 984:	b8 5f       	subi	r27, 0xF8	; 248
 986:	39 f0       	breq	.+14     	; 0x996 <__fixunssfsi+0x4c>
 988:	b9 3f       	cpi	r27, 0xF9	; 249
 98a:	cc f3       	brlt	.-14     	; 0x97e <__fixunssfsi+0x34>
 98c:	86 95       	lsr	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b3 95       	inc	r27
 994:	d9 f7       	brne	.-10     	; 0x98c <__fixunssfsi+0x42>
 996:	3e f4       	brtc	.+14     	; 0x9a6 <__fixunssfsi+0x5c>
 998:	90 95       	com	r25
 99a:	80 95       	com	r24
 99c:	70 95       	com	r23
 99e:	61 95       	neg	r22
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	08 95       	ret

000009a8 <__floatunsisf>:
 9a8:	e8 94       	clt
 9aa:	09 c0       	rjmp	.+18     	; 0x9be <__floatsisf+0x12>

000009ac <__floatsisf>:
 9ac:	97 fb       	bst	r25, 7
 9ae:	3e f4       	brtc	.+14     	; 0x9be <__floatsisf+0x12>
 9b0:	90 95       	com	r25
 9b2:	80 95       	com	r24
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	99 23       	and	r25, r25
 9c0:	a9 f0       	breq	.+42     	; 0x9ec <__floatsisf+0x40>
 9c2:	f9 2f       	mov	r31, r25
 9c4:	96 e9       	ldi	r25, 0x96	; 150
 9c6:	bb 27       	eor	r27, r27
 9c8:	93 95       	inc	r25
 9ca:	f6 95       	lsr	r31
 9cc:	87 95       	ror	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b7 95       	ror	r27
 9d4:	f1 11       	cpse	r31, r1
 9d6:	f8 cf       	rjmp	.-16     	; 0x9c8 <__floatsisf+0x1c>
 9d8:	fa f4       	brpl	.+62     	; 0xa18 <__floatsisf+0x6c>
 9da:	bb 0f       	add	r27, r27
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__floatsisf+0x36>
 9de:	60 ff       	sbrs	r22, 0
 9e0:	1b c0       	rjmp	.+54     	; 0xa18 <__floatsisf+0x6c>
 9e2:	6f 5f       	subi	r22, 0xFF	; 255
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	16 c0       	rjmp	.+44     	; 0xa18 <__floatsisf+0x6c>
 9ec:	88 23       	and	r24, r24
 9ee:	11 f0       	breq	.+4      	; 0x9f4 <__floatsisf+0x48>
 9f0:	96 e9       	ldi	r25, 0x96	; 150
 9f2:	11 c0       	rjmp	.+34     	; 0xa16 <__floatsisf+0x6a>
 9f4:	77 23       	and	r23, r23
 9f6:	21 f0       	breq	.+8      	; 0xa00 <__floatsisf+0x54>
 9f8:	9e e8       	ldi	r25, 0x8E	; 142
 9fa:	87 2f       	mov	r24, r23
 9fc:	76 2f       	mov	r23, r22
 9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__floatsisf+0x5e>
 a00:	66 23       	and	r22, r22
 a02:	71 f0       	breq	.+28     	; 0xa20 <__floatsisf+0x74>
 a04:	96 e8       	ldi	r25, 0x86	; 134
 a06:	86 2f       	mov	r24, r22
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	60 e0       	ldi	r22, 0x00	; 0
 a0c:	2a f0       	brmi	.+10     	; 0xa18 <__floatsisf+0x6c>
 a0e:	9a 95       	dec	r25
 a10:	66 0f       	add	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	da f7       	brpl	.-10     	; 0xa0e <__floatsisf+0x62>
 a18:	88 0f       	add	r24, r24
 a1a:	96 95       	lsr	r25
 a1c:	87 95       	ror	r24
 a1e:	97 f9       	bld	r25, 7
 a20:	08 95       	ret

00000a22 <__fp_inf>:
 a22:	97 f9       	bld	r25, 7
 a24:	9f 67       	ori	r25, 0x7F	; 127
 a26:	80 e8       	ldi	r24, 0x80	; 128
 a28:	70 e0       	ldi	r23, 0x00	; 0
 a2a:	60 e0       	ldi	r22, 0x00	; 0
 a2c:	08 95       	ret

00000a2e <__fp_nan>:
 a2e:	9f ef       	ldi	r25, 0xFF	; 255
 a30:	80 ec       	ldi	r24, 0xC0	; 192
 a32:	08 95       	ret

00000a34 <__fp_pscA>:
 a34:	00 24       	eor	r0, r0
 a36:	0a 94       	dec	r0
 a38:	16 16       	cp	r1, r22
 a3a:	17 06       	cpc	r1, r23
 a3c:	18 06       	cpc	r1, r24
 a3e:	09 06       	cpc	r0, r25
 a40:	08 95       	ret

00000a42 <__fp_pscB>:
 a42:	00 24       	eor	r0, r0
 a44:	0a 94       	dec	r0
 a46:	12 16       	cp	r1, r18
 a48:	13 06       	cpc	r1, r19
 a4a:	14 06       	cpc	r1, r20
 a4c:	05 06       	cpc	r0, r21
 a4e:	08 95       	ret

00000a50 <__fp_round>:
 a50:	09 2e       	mov	r0, r25
 a52:	03 94       	inc	r0
 a54:	00 0c       	add	r0, r0
 a56:	11 f4       	brne	.+4      	; 0xa5c <__fp_round+0xc>
 a58:	88 23       	and	r24, r24
 a5a:	52 f0       	brmi	.+20     	; 0xa70 <__fp_round+0x20>
 a5c:	bb 0f       	add	r27, r27
 a5e:	40 f4       	brcc	.+16     	; 0xa70 <__fp_round+0x20>
 a60:	bf 2b       	or	r27, r31
 a62:	11 f4       	brne	.+4      	; 0xa68 <__fp_round+0x18>
 a64:	60 ff       	sbrs	r22, 0
 a66:	04 c0       	rjmp	.+8      	; 0xa70 <__fp_round+0x20>
 a68:	6f 5f       	subi	r22, 0xFF	; 255
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	08 95       	ret

00000a72 <__fp_split3>:
 a72:	57 fd       	sbrc	r21, 7
 a74:	90 58       	subi	r25, 0x80	; 128
 a76:	44 0f       	add	r20, r20
 a78:	55 1f       	adc	r21, r21
 a7a:	59 f0       	breq	.+22     	; 0xa92 <__fp_splitA+0x10>
 a7c:	5f 3f       	cpi	r21, 0xFF	; 255
 a7e:	71 f0       	breq	.+28     	; 0xa9c <__fp_splitA+0x1a>
 a80:	47 95       	ror	r20

00000a82 <__fp_splitA>:
 a82:	88 0f       	add	r24, r24
 a84:	97 fb       	bst	r25, 7
 a86:	99 1f       	adc	r25, r25
 a88:	61 f0       	breq	.+24     	; 0xaa2 <__fp_splitA+0x20>
 a8a:	9f 3f       	cpi	r25, 0xFF	; 255
 a8c:	79 f0       	breq	.+30     	; 0xaac <__fp_splitA+0x2a>
 a8e:	87 95       	ror	r24
 a90:	08 95       	ret
 a92:	12 16       	cp	r1, r18
 a94:	13 06       	cpc	r1, r19
 a96:	14 06       	cpc	r1, r20
 a98:	55 1f       	adc	r21, r21
 a9a:	f2 cf       	rjmp	.-28     	; 0xa80 <__fp_split3+0xe>
 a9c:	46 95       	lsr	r20
 a9e:	f1 df       	rcall	.-30     	; 0xa82 <__fp_splitA>
 aa0:	08 c0       	rjmp	.+16     	; 0xab2 <__fp_splitA+0x30>
 aa2:	16 16       	cp	r1, r22
 aa4:	17 06       	cpc	r1, r23
 aa6:	18 06       	cpc	r1, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	f1 cf       	rjmp	.-30     	; 0xa8e <__fp_splitA+0xc>
 aac:	86 95       	lsr	r24
 aae:	71 05       	cpc	r23, r1
 ab0:	61 05       	cpc	r22, r1
 ab2:	08 94       	sec
 ab4:	08 95       	ret

00000ab6 <__fp_zero>:
 ab6:	e8 94       	clt

00000ab8 <__fp_szero>:
 ab8:	bb 27       	eor	r27, r27
 aba:	66 27       	eor	r22, r22
 abc:	77 27       	eor	r23, r23
 abe:	cb 01       	movw	r24, r22
 ac0:	97 f9       	bld	r25, 7
 ac2:	08 95       	ret

00000ac4 <__gesf2>:
 ac4:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_cmp>
 ac8:	08 f4       	brcc	.+2      	; 0xacc <__gesf2+0x8>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	08 95       	ret

00000ace <__mulsf3>:
 ace:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__mulsf3x>
 ad2:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_round>
 ad6:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fp_pscA>
 ada:	38 f0       	brcs	.+14     	; 0xaea <__mulsf3+0x1c>
 adc:	0e 94 21 05 	call	0xa42	; 0xa42 <__fp_pscB>
 ae0:	20 f0       	brcs	.+8      	; 0xaea <__mulsf3+0x1c>
 ae2:	95 23       	and	r25, r21
 ae4:	11 f0       	breq	.+4      	; 0xaea <__mulsf3+0x1c>
 ae6:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_inf>
 aea:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__fp_nan>
 aee:	11 24       	eor	r1, r1
 af0:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_szero>

00000af4 <__mulsf3x>:
 af4:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_split3>
 af8:	70 f3       	brcs	.-36     	; 0xad6 <__mulsf3+0x8>

00000afa <__mulsf3_pse>:
 afa:	95 9f       	mul	r25, r21
 afc:	c1 f3       	breq	.-16     	; 0xaee <__mulsf3+0x20>
 afe:	95 0f       	add	r25, r21
 b00:	50 e0       	ldi	r21, 0x00	; 0
 b02:	55 1f       	adc	r21, r21
 b04:	62 9f       	mul	r22, r18
 b06:	f0 01       	movw	r30, r0
 b08:	72 9f       	mul	r23, r18
 b0a:	bb 27       	eor	r27, r27
 b0c:	f0 0d       	add	r31, r0
 b0e:	b1 1d       	adc	r27, r1
 b10:	63 9f       	mul	r22, r19
 b12:	aa 27       	eor	r26, r26
 b14:	f0 0d       	add	r31, r0
 b16:	b1 1d       	adc	r27, r1
 b18:	aa 1f       	adc	r26, r26
 b1a:	64 9f       	mul	r22, r20
 b1c:	66 27       	eor	r22, r22
 b1e:	b0 0d       	add	r27, r0
 b20:	a1 1d       	adc	r26, r1
 b22:	66 1f       	adc	r22, r22
 b24:	82 9f       	mul	r24, r18
 b26:	22 27       	eor	r18, r18
 b28:	b0 0d       	add	r27, r0
 b2a:	a1 1d       	adc	r26, r1
 b2c:	62 1f       	adc	r22, r18
 b2e:	73 9f       	mul	r23, r19
 b30:	b0 0d       	add	r27, r0
 b32:	a1 1d       	adc	r26, r1
 b34:	62 1f       	adc	r22, r18
 b36:	83 9f       	mul	r24, r19
 b38:	a0 0d       	add	r26, r0
 b3a:	61 1d       	adc	r22, r1
 b3c:	22 1f       	adc	r18, r18
 b3e:	74 9f       	mul	r23, r20
 b40:	33 27       	eor	r19, r19
 b42:	a0 0d       	add	r26, r0
 b44:	61 1d       	adc	r22, r1
 b46:	23 1f       	adc	r18, r19
 b48:	84 9f       	mul	r24, r20
 b4a:	60 0d       	add	r22, r0
 b4c:	21 1d       	adc	r18, r1
 b4e:	82 2f       	mov	r24, r18
 b50:	76 2f       	mov	r23, r22
 b52:	6a 2f       	mov	r22, r26
 b54:	11 24       	eor	r1, r1
 b56:	9f 57       	subi	r25, 0x7F	; 127
 b58:	50 40       	sbci	r21, 0x00	; 0
 b5a:	9a f0       	brmi	.+38     	; 0xb82 <__stack+0x83>
 b5c:	f1 f0       	breq	.+60     	; 0xb9a <__stack+0x9b>
 b5e:	88 23       	and	r24, r24
 b60:	4a f0       	brmi	.+18     	; 0xb74 <__stack+0x75>
 b62:	ee 0f       	add	r30, r30
 b64:	ff 1f       	adc	r31, r31
 b66:	bb 1f       	adc	r27, r27
 b68:	66 1f       	adc	r22, r22
 b6a:	77 1f       	adc	r23, r23
 b6c:	88 1f       	adc	r24, r24
 b6e:	91 50       	subi	r25, 0x01	; 1
 b70:	50 40       	sbci	r21, 0x00	; 0
 b72:	a9 f7       	brne	.-22     	; 0xb5e <__stack+0x5f>
 b74:	9e 3f       	cpi	r25, 0xFE	; 254
 b76:	51 05       	cpc	r21, r1
 b78:	80 f0       	brcs	.+32     	; 0xb9a <__stack+0x9b>
 b7a:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_inf>
 b7e:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_szero>
 b82:	5f 3f       	cpi	r21, 0xFF	; 255
 b84:	e4 f3       	brlt	.-8      	; 0xb7e <__stack+0x7f>
 b86:	98 3e       	cpi	r25, 0xE8	; 232
 b88:	d4 f3       	brlt	.-12     	; 0xb7e <__stack+0x7f>
 b8a:	86 95       	lsr	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	b7 95       	ror	r27
 b92:	f7 95       	ror	r31
 b94:	e7 95       	ror	r30
 b96:	9f 5f       	subi	r25, 0xFF	; 255
 b98:	c1 f7       	brne	.-16     	; 0xb8a <__stack+0x8b>
 b9a:	fe 2b       	or	r31, r30
 b9c:	88 0f       	add	r24, r24
 b9e:	91 1d       	adc	r25, r1
 ba0:	96 95       	lsr	r25
 ba2:	87 95       	ror	r24
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret

00000ba8 <__fp_cmp>:
 ba8:	99 0f       	add	r25, r25
 baa:	00 08       	sbc	r0, r0
 bac:	55 0f       	add	r21, r21
 bae:	aa 0b       	sbc	r26, r26
 bb0:	e0 e8       	ldi	r30, 0x80	; 128
 bb2:	fe ef       	ldi	r31, 0xFE	; 254
 bb4:	16 16       	cp	r1, r22
 bb6:	17 06       	cpc	r1, r23
 bb8:	e8 07       	cpc	r30, r24
 bba:	f9 07       	cpc	r31, r25
 bbc:	c0 f0       	brcs	.+48     	; 0xbee <__fp_cmp+0x46>
 bbe:	12 16       	cp	r1, r18
 bc0:	13 06       	cpc	r1, r19
 bc2:	e4 07       	cpc	r30, r20
 bc4:	f5 07       	cpc	r31, r21
 bc6:	98 f0       	brcs	.+38     	; 0xbee <__fp_cmp+0x46>
 bc8:	62 1b       	sub	r22, r18
 bca:	73 0b       	sbc	r23, r19
 bcc:	84 0b       	sbc	r24, r20
 bce:	95 0b       	sbc	r25, r21
 bd0:	39 f4       	brne	.+14     	; 0xbe0 <__fp_cmp+0x38>
 bd2:	0a 26       	eor	r0, r26
 bd4:	61 f0       	breq	.+24     	; 0xbee <__fp_cmp+0x46>
 bd6:	23 2b       	or	r18, r19
 bd8:	24 2b       	or	r18, r20
 bda:	25 2b       	or	r18, r21
 bdc:	21 f4       	brne	.+8      	; 0xbe6 <__fp_cmp+0x3e>
 bde:	08 95       	ret
 be0:	0a 26       	eor	r0, r26
 be2:	09 f4       	brne	.+2      	; 0xbe6 <__fp_cmp+0x3e>
 be4:	a1 40       	sbci	r26, 0x01	; 1
 be6:	a6 95       	lsr	r26
 be8:	8f ef       	ldi	r24, 0xFF	; 255
 bea:	81 1d       	adc	r24, r1
 bec:	81 1d       	adc	r24, r1
 bee:	08 95       	ret

00000bf0 <_exit>:
 bf0:	f8 94       	cli

00000bf2 <__stop_program>:
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <__stop_program>
